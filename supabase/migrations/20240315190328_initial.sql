create table "public"."games" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "code" character varying not null,
    "is_active" boolean not null default true,
    "creator" uuid,
    "end_at" timestamp with time zone,
    "updated_at" timestamp with time zone default now(),
    "cooldown_hours" bigint default '4'::bigint,
    "ai_enabled" boolean not null default false
);


alter table "public"."games" enable row level security;

create table "public"."participation" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "profile_id" uuid,
    "score" bigint[],
    "updated_at" timestamp with time zone,
    "game_id" bigint,
    "nickname" text not null,
    "total_score" bigint default '0'::bigint,
    "nickname_image_url" text
);


create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "website" text
);


alter table "public"."profiles" enable row level security;

CREATE UNIQUE INDEX "Game_code_key" ON public.games USING btree (code);

CREATE UNIQUE INDEX "Game_pkey" ON public.games USING btree (id);

CREATE UNIQUE INDEX participation_pkey ON public.participation USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

alter table "public"."games" add constraint "Game_pkey" PRIMARY KEY using index "Game_pkey";

alter table "public"."participation" add constraint "participation_pkey" PRIMARY KEY using index "participation_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."games" add constraint "Game_code_key" UNIQUE using index "Game_code_key";

alter table "public"."games" add constraint "games_creator_fkey" FOREIGN KEY (creator) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."games" validate constraint "games_creator_fkey";

alter table "public"."participation" add constraint "participation_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."participation" validate constraint "participation_game_id_fkey";

alter table "public"."participation" add constraint "participation_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."participation" validate constraint "participation_profile_id_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

grant delete on table "public"."games" to "anon";

grant insert on table "public"."games" to "anon";

grant references on table "public"."games" to "anon";

grant select on table "public"."games" to "anon";

grant trigger on table "public"."games" to "anon";

grant truncate on table "public"."games" to "anon";

grant update on table "public"."games" to "anon";

grant delete on table "public"."games" to "authenticated";

grant insert on table "public"."games" to "authenticated";

grant references on table "public"."games" to "authenticated";

grant select on table "public"."games" to "authenticated";

grant trigger on table "public"."games" to "authenticated";

grant truncate on table "public"."games" to "authenticated";

grant update on table "public"."games" to "authenticated";

grant delete on table "public"."games" to "service_role";

grant insert on table "public"."games" to "service_role";

grant references on table "public"."games" to "service_role";

grant select on table "public"."games" to "service_role";

grant trigger on table "public"."games" to "service_role";

grant truncate on table "public"."games" to "service_role";

grant update on table "public"."games" to "service_role";

grant delete on table "public"."participation" to "anon";

grant insert on table "public"."participation" to "anon";

grant references on table "public"."participation" to "anon";

grant select on table "public"."participation" to "anon";

grant trigger on table "public"."participation" to "anon";

grant truncate on table "public"."participation" to "anon";

grant update on table "public"."participation" to "anon";

grant delete on table "public"."participation" to "authenticated";

grant insert on table "public"."participation" to "authenticated";

grant references on table "public"."participation" to "authenticated";

grant select on table "public"."participation" to "authenticated";

grant trigger on table "public"."participation" to "authenticated";

grant truncate on table "public"."participation" to "authenticated";

grant update on table "public"."participation" to "authenticated";

grant delete on table "public"."participation" to "service_role";

grant insert on table "public"."participation" to "service_role";

grant references on table "public"."participation" to "service_role";

grant select on table "public"."participation" to "service_role";

grant trigger on table "public"."participation" to "service_role";

grant truncate on table "public"."participation" to "service_role";

grant update on table "public"."participation" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."games"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."games"
as permissive
for select
to public
using (true);


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id));
